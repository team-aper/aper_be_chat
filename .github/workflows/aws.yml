name: Deploy to EC2 using Docker and ECR

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code with Submodules
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Create application-secret.yml from secret
        run: |
          mkdir -p ./src/main/resources/yml
          echo "${{ secrets.APPLICATION_SECRET_YML }}" > ./src/main/resources/yml/application-secret.yml

      - name: Build with Gradle
        run: ./gradlew build

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      - name: Build Docker image
        run: docker build -t chat-repository .

      - name: Tag Docker image
        run: docker tag chat-repository:latest ${{ secrets.ECR_URI }}:latest

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.ECR_URI }}:latest

      - name: Delete non-latest images from ECR
        run: |
          echo "Fetching non-latest image tags from ECR..."
          IMAGE_TAGS=$(aws ecr describe-images \
            --repository-name chat-repository \
            --query "imageDetails[?!(contains(imageTags, 'latest'))].imageTags[]" \
            --output text)

          if [ -z "$IMAGE_TAGS" ]; then
            echo "No non-latest images found. Skipping deletion."
          else
            for TAG in $IMAGE_TAGS; do
              echo "Deleting image with tag: $TAG"
              aws ecr batch-delete-image \
                --repository-name chat-repository \
                --image-ids imageTag=$TAG || echo "Failed to delete image with tag: $TAG"
            done
          fi

      - name: Deploy using Docker Compose
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Starting Deployment Process"
            cd /home/ubuntu/docker-compose
            sudo docker-compose down --remove-orphans
            echo "Docker Compose Down Completed"
            sudo docker-compose pull
            echo "Docker Images Pulled Successfully"
            sudo docker-compose up -d
            echo "New Containers Deployed"

      - name: Clean up Docker resources
        if: success()
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "Starting Cleanup Process"
            sudo docker system prune -f
            echo "Cleanup Process Completed"